@model IList<AddressAttributeModel>
@using Nop.Core.Domain.Catalog;
@foreach (var attribute in Model)
{
    var controlId = $"address_attribute_{attribute.Id}";
    var textPrompt = attribute.Name;

    <div class="row">
        <label class="col-form-label col-12 col-md-4">@textPrompt:</label>
        <div class="col-12 col-md-4">
            @switch (attribute.AttributeControlType)
            {
                case AttributeControlType.DropdownList:
                    {
                        <select name="@(controlId)" id="@(controlId)"  class="form-control form-select">
                            @if (!attribute.IsRequired)
                            {
                                <option value="0">---</option>
                            }
                            @foreach (var attributeValue in attribute.Values)
                            {
                                <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeValue.Name</option>
                            }
                        </select>
                    }
                    break;
                case AttributeControlType.RadioList:
                    {
                        <ul class="option-list">
                            @foreach (var attributeValue in attribute.Values)
                            {
                            <li>
                                <div class="custom-control form-check">
                                    <input class="form-check-input" id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                    <label class="form-check-label" for="@(controlId)_@(attributeValue.Id)">@attributeValue.Name</label>
                                </div>
                            </li>
                            }
                        </ul>
                    }
                    break;
                case AttributeControlType.Checkboxes:
                case AttributeControlType.ReadonlyCheckboxes:
                    {
                    <ul class="option-list">
                        @foreach (var attributeValue in attribute.Values)
                        {
                            <li>
                                <div class="custom-control form-check">
                                    <input  class="form-check-input"  id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null) />
                                    <label  class="form-check-label"  for="@(controlId)_@(attributeValue.Id)">@attributeValue.Name</label>
                                </div>
                            </li>
                        }
                    </ul>
                    }
                    break;
                case AttributeControlType.TextBox:
                    {
                        <input name="@(controlId)" type="text" class="textbox form-control" id="@(controlId)" value="@(attribute.DefaultValue)" />
                    }
                    break;
                case AttributeControlType.MultilineTextbox:
                    {
                        <textarea class="form-control"  cols="20" id="@(controlId)" name="@(controlId)">@(attribute.DefaultValue)</textarea>
                    }
                    break;
                case AttributeControlType.Datepicker:
                case AttributeControlType.FileUpload:
                case AttributeControlType.ColorSquares:
                case AttributeControlType.ImageSquares:
                    {
                        //not support attribute type
                    }
                    break;
            }
        </div>
        <div class="col-12 col-md-4 required-error">
            @if (attribute.IsRequired)
            {
                <strong class="d-none d-md-block"><nop-required /></strong>
            }
        </div>       
    </div>
}
