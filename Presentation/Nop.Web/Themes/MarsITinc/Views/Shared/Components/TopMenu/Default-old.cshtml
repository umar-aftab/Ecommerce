@model TopMenuModel
    <div class="navbar navbar-toggleable-md navbar-inverse bg-primary">
        <ul class="top-menu navbar-nav mr-auto">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuBefore })
            @if (Model.DisplayHomepageMenuItem)
            {
                <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
            }
            @if (!Model.UseAjaxMenu)
            {
                var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
                @foreach (var category in rootCategories)
                {
                    var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category
                    };
                    @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                }


            }
            @foreach (var topic in Model.Topics)
            {
                <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
            }
            @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
            {
                <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>

            }
            @if (Model.DisplayProductSearchMenuItem)
            {
                <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
            }
            @if (Model.DisplayCustomerInfoMenuItem)
            {
                <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
            }
            @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
            {
                <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
            }
            @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
            {
                <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
            }
            @if (Model.DisplayContactUsMenuItem)
            {
                <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuAfter })
        </ul>
    </div>
        @{
            var rootCategoriesResponsive = Model.Categories.ToList();
            //name it "Categories" if we have only categories. Otherwise, "Menu"
            var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
            <div class="menu-toggle">@responsiveMenuTitle</div>
            <ul class="top-menu mobile">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore })
                @if (Model.DisplayHomepageMenuItem)
                {
                    <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
                }
                @if (!Model.UseAjaxMenu)
                {
                    @foreach (var category in rootCategoriesResponsive)
                    {
                        var categoryLineModel = new TopMenuModel.CategoryLineModel
                        {
                            Category = category,
                            ResponsiveMobileMenu = true
                        };
                        @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                    }

                }
                @foreach (var topic in Model.Topics)
                {
                    <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                }
                @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
                {
                    <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
                }
                @if (Model.DisplayProductSearchMenuItem)
                {
                    <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
                }
                @if (Model.DisplayCustomerInfoMenuItem)
                {
                    <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
                }
                @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
                {
                    <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                }
                @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
                {
                    <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
                }
                @if (Model.DisplayContactUsMenuItem)
                {
                    <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter })
            </ul>

            @if (Model.UseAjaxMenu)
            {
                <script asp-location="Footer">
        $(document).ready(function () {
            $('.menu-toggle').on('click', function () {
                $(this).siblings('.top-menu.mobile').slideToggle('slow');
            });
            var localized_data = {
                AjaxFailure: "@T("MainMenu.AjaxFailure")"
            };
            mainMenu.init('@Url.RouteUrl("GetCatalogRoot")', '@Url.RouteUrl("GetCatalogSubCategories")', 'ul.top-menu.notmobile', 'ul.top-menu.mobile', localized_data);
        });
                </script>

                Html.AppendScriptParts(ResourceLocation.Footer, "~/js/public.menu.js");

            }
            else
            {
                <script asp-location="Footer">
                    $(document).ready(function () {
                        $('.menu-toggle').on('click', function () {
                            $(this).siblings('.top-menu.mobile').slideToggle('slow');
                        });
                        $('.top-menu.mobile .sublist-toggle').on('click', function () {
                            $(this).siblings('.sublist').slideToggle('slow');
                        });
                    });
                </script>

            }

        }
