@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
<div class="order-summary-content">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error alert alert-danger">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="table-wrapper mb-4">

                @foreach (var item in Model.Items)
                {
                    <div class="row py-4 border-bottom">
                        <div class="col-4 col-xl-1 col-sm-2">
                            <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" class="img-fluid" /></a>
                        </div>

                        <div class="col-8 col-xl-11 col-sm-10">
                            <div class="row">
                                <div class="col-12 col-md-6 col-lg-7">
                                    <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="fs-5">@item.ProductName</a>
                                    @if (Model.ShowSku)
                                    {
                                        <div>
                                            <label class="td-title">@T("ShoppingCart.SKU") : </label>
                                            <span class="sku-number">@item.Sku</span>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                    {
                                        <div class="attributes text-secondary mb-2">
                                            @Html.Raw(item.AttributeInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                    {
                                        <div class="recurring-info text-secondary mb-2">
                                            @Html.Raw(item.RecurringInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RentalInfo))
                                    {
                                        <div class="rental-info text-secondary mb-2">
                                            @Html.Raw(item.RentalInfo)
                                        </div>
                                    }
                                    @if (Model.IsEditable && item.AllowItemEditing)
                                    {
                                        var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol);
                                        editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                        <div class="edit-item">
                                            <a class="btn btn-sm btn-primary" href="@editCartItemUrl">@T("Common.Edit")</a>
                                        </div>
                                    }
                                    @if (item.Warnings.Count > 0)
                                    {
                                        <div class="message-error alert alert-danger">
                                            <ul>
                                                @foreach (var warning in item.Warnings)
                                                {
                                                    <li>@Html.Raw(warning)</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </div>

                                <div class="col-12 col-md-6 col-lg-5 mt-3 mt-md-0">
                                    <div class="d-flex justify-content-between">
                                        <div class="pt-1">
                                            @if (Model.IsEditable)
                                            {
                                                @if (item.DisableRemoval)
                                                {
                                                    <text>&nbsp;</text>
                                                }
                                                else
                                                {
                                                    <div class="form-check">
                                                        <input class="form-check-input" id="removefromcart@(item.Id)" type="checkbox" name="removefromcart" value="@(item.Id)" />
                                                        <label class="form-check-label" for="removefromcart@(item.Id)">Remove</label>
                                                    </div>
                                                }
                                            }
                                        </div>

                                        <div class="" style="width: 65px;">
                                            @if (Model.IsEditable)
                                            {
                                                if (item.AllowedQuantities.Count > 0)
                                                {
                                                    <select name="itemquantity@(item.Id)" for="itemquantity@(item.Id)" class="qty-dropdown form-control form-select float-md-end">
                                                        @foreach (var qty in item.AllowedQuantities)
                                                        {
                                                            <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <input name="itemquantity@(item.Id)" for="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input form-control float-md-end text-center" />
                                                }

                                            }
                                            else
                                            {
                                                <span class="product-quantity float-md-end">@item.Quantity</span>
                                            }
                                        </div>

                                        <div class="pt-1 text-end" style="min-width: 85px;">
                                            <span class="product-subtotal fs-6 fw-bold">@item.SubTotal</span>
                                            @if (!string.IsNullOrEmpty(item.Discount))
                                            {
                                                <div class="discount text-success">
                                                    @T("ShoppingCart.ItemYouSave", item.Discount)
                                                </div>
                                                if (item.MaximumDiscountedQty.HasValue)
                                                {
                                                    <div class="discount-additional-info text-primary">
                                                        @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                }

                @*<table class="cart table table-bordered table-hover">
                    <colgroup>
                    @if (Model.IsEditable)
                    {
                    <col width="1" />
                    }
                    @if (Model.ShowSku)
                    {
                    <col width="1" />
                    }
                    @if (Model.ShowProductImages)
                    {
                    <col width="1" />
                    }
                    <col />
                    @if (Model.ShowVendorName)
                    {
                    <col width="1" />
                    }
                    <col width="1" />
                    <col width="1" />
                    <col width="1" />
                    </colgroup>
                    <thead>
                    <tr>
                    @if (Model.IsEditable)
                    {
                    <th class="remove-from-cart">
                    @T("ShoppingCart.Remove")
                    </th>
                    }
                    @if (Model.ShowSku)
                    {
                    <th class="sku">
                    @T("ShoppingCart.SKU")
                    </th>
                    }
                    @if (Model.ShowProductImages)
                    {
                    <th class="product-picture">
                    @T("ShoppingCart.Image")
                    </th>
                    }
                    <th class="product">
                    @T("ShoppingCart.Product(s)")
                    </th>
                    @if (Model.ShowVendorName)
                    {
                    <th class="vendor">
                    @T("ShoppingCart.VendorName")
                    </th>
                    }
                    <th class="unit-price">
                    @T("ShoppingCart.UnitPrice")
                    </th>
                    <th class="quantity">
                    @T("ShoppingCart.Quantity")
                    </th>
                    <th class="subtotal">
                    @T("ShoppingCart.ItemTotal")
                    </th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in Model.Items)
                    {
                    <tr>
                    @if (Model.IsEditable)
                    {
                    <td class="remove-from-cart">
                    @if (item.DisableRemoval)
                    {
                    <text>&nbsp;</text>
                    }
                    else
                    {
                    <div class="custom-control custom-checkbox mr-sm-0 mb-sm-0 mb-0">
                    <input class="custom-control-input" id="removefromcart@(item.Id)" type="checkbox" name="removefromcart" value="@(item.Id)" />
                    <label class="custom-control-label" for="removefromcart@(item.Id)"> &nbsp;</label>
                    </div>
                    }
                    </td>
                    }
                    @if (Model.ShowSku)
                    {
                    <td class="sku">
                    <label class="td-title">@T("ShoppingCart.SKU"):</label>
                    <span class="sku-number">@item.Sku</span>
                    </td>
                    }
                    @if (Model.ShowProductImages)
                    {
                    <td class="product-picture">
                    <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                    </td>
                    }
                    <td class="product">
                    <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name">@item.ProductName</a>
                    @if (!string.IsNullOrEmpty(item.AttributeInfo))
                    {
                    <div class="attributes">
                    @Html.Raw(item.AttributeInfo)
                    </div>
                    }
                    @if (!string.IsNullOrEmpty(item.RecurringInfo))
                    {
                    <div class="recurring-info">
                    @Html.Raw(item.RecurringInfo)
                    </div>
                    }
                    @if (!string.IsNullOrEmpty(item.RentalInfo))
                    {
                    <div class="rental-info">
                    @Html.Raw(item.RentalInfo)
                    </div>
                    }
                    @if (Model.IsEditable && item.AllowItemEditing)
                    {
                    var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol);
                    editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                    <div class="edit-item">
                    <a href="@editCartItemUrl">@T("Common.Edit")</a>
                    </div>
                    }
                    @if (item.Warnings.Count > 0)
                    {
                    <div class="message-error alert alert-danger">
                    <ul>
                    @foreach (var warning in item.Warnings)
                    {
                    <li>@Html.Raw(warning)</li>
                    }
                    </ul>
                    </div>
                    }
                    </td>
                    @if (Model.ShowVendorName)
                    {
                    <td class="vendor">
                    <label class="td-title">@T("ShoppingCart.VendorName"):</label>
                    <span class="vendor-name">@item.VendorName</span>
                    </td>
                    }
                    <td class="unit-price">
                    <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                    <span class="product-unit-price">@item.UnitPrice</span>
                    </td>
                    <td class="quantity">
                    <label class="td-title" for="itemquantity@(item.Id)">@T("ShoppingCart.Quantity"):</label>
                    @if (Model.IsEditable)
                    {
                    if (item.AllowedQuantities.Count > 0)
                    {
                    <select name="itemquantity@(item.Id)" for="itemquantity@(item.Id)" class="qty-dropdown form-control custom-select">
                    @foreach (var qty in item.AllowedQuantities)
                    {
                    <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                    }
                    </select>
                    }
                    else
                    {
                    <input name="itemquantity@(item.Id)" for="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input form-control" />
                    }

                    }
                    else
                    {
                    <span class="product-quantity">@item.Quantity</span>
                    }
                    </td>
                    <td class="subtotal">
                    <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                    <span class="product-subtotal">@item.SubTotal</span>
                    @if (!string.IsNullOrEmpty(item.Discount))
                    {
                    <div class="discount">
                    @T("ShoppingCart.ItemYouSave", item.Discount)
                    </div>
                    if (item.MaximumDiscountedQty.HasValue)
                    {
                    <div class="discount-additional-info">
                    @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                    </div>
                    }
                    }
                    </td>
                    </tr>
                    }
                    </tbody>
                    </table>*@
            </div>

            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }

            <div class="cart-options">
                @if (Model.IsEditable)
                {
                    <div class="row mb-5">
                        <div class="col-12 col-md-4 col-lg-3 d-grid">
                            <button type="submit" name="updatecart" class="btn btn-primary button-2 update-cart-button text-uppercase mb-4 mb-md-0">
                                @T("ShoppingCart.UpdateCart")
                            </button>
                        </div>
                        <div class="col-12 col-md-4 col-lg-3 d-grid">
                            <button type="submit" name="continueshopping" value="" class="btn btn-success button-2 continue-shopping-button text-uppercase mb-4 mb-md-0">
                                @T("ShoppingCart.ContinueShopping")
                            </button>
                        </div>
                        <div class="col-12 col-md-4 col-lg-3 d-grid">
                            @await Component.InvokeAsync("ShoppingCartEstimateShipping")
                        </div>
                    </div>
                }
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
                <div class="selected-checkout-attributes">
                    @await Component.InvokeAsync("SelectedCheckoutAttributes")
                </div>
            </div>

            <div class="cart-footer">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter })
                <div class="row">
                    <div class="col-12 col-md-6">
                        @if (Model.IsEditable)
                        {

                            <div class="cart-collaterals">
                                <div class="deals">
                                    @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                    @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals })
                                </div>
                            </div>
                        }
                    </div>

                    <div class="col-12 col-md-6">
                        <div class="totals">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals })
                            @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                            @if (Model.IsEditable)
                            {
                                if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                                {
                                    <div class="min-amount-warning alert alert-warning">
                                        @Model.MinOrderSubtotalWarning
                                    </div>
                                }
                            }
                            @if (Model.IsEditable)
                            {
                                if (Model.TermsOfServiceOnShoppingCartPage)
                                {
                                    <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                        <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                    </div>
                                    <div class="terms-of-service">

                                        <div class="custom-control form-check mb-2 mr-sm-2 mb-sm-0">
                                            <input class="form-check-input" id="termsofservice" type="checkbox" name="termsofservice" />
                                            <label for="termsofservice" class="form-check-label">
                                                @T("Checkout.TermsOfService.IAccept")
                                                @if (Model.TermsOfServicePopup)
                                                {
                                                    <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                                    <script asp-location="Footer">
                                                        $(document).ready(function () {
                                                            $('#read-terms').on('click',
                                                                function (e) {
                                                                e.preventDefault();
                                                                displayPopupContentFromUrl(
                                                                    '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                                    '@T("Checkout.TermsOfService")');
                                                            });
                                                        });
                                                    </script>
                                                }
                                                else
                                                {
                                                    <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                                }
                                            </label>
                                        </div>
                                    </div>
                                }
                                <div class="checkout-buttons my-4 d-grid gap-2 col-12 col-md-6">
                                    @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                                    {
                                        <script asp-location="Footer">
                                            $(document).ready(function () {
                                                $('#checkout').on('click', function () {
                                                    //terms of service
                                                    var termOfServiceOk = true;
                                                    if ($('#termsofservice').length > 0) {
                                                        //terms of service element exists
                                                        if (!$('#termsofservice').is(':checked')) {
                                                            $("#terms-of-service-warning-box").dialog();
                                                            termOfServiceOk = false;
                                                        } else {
                                                            termOfServiceOk = true;
                                                        }
                                                    }
                                                    return termOfServiceOk;
                                                });
                                            });
                                        </script>
                                        if (orderSettings.CheckoutDisabled)
                                        {
                                            <div class="checkout-disabled">
                                                @T("Checkout.Disabled")
                                            </div>
                                        }
                                        else
                                        {
                                            <button type="submit" id="checkout" name="checkout" value="checkout" class="btn btn-danger button-1 checkout-button">
                                                @T("Checkout.Button")
                                            </button>
                                        }
                                    }
                                </div>
                                <div class="addon-buttons">
                                    @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                    @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                    {
                                        @await Component.InvokeAsync(pm)
                                    }
                                </div>
                            }
                        </div>
                    </div>
                  @*  @if (Model.IsEditable)
                    {
                        @await Component.InvokeAsync("CrossSellProducts")
                    }*@
                </div>
            </div>
        </form>
    }
    else
    {
        <div class="no-data my-4">
            <div class="alert alert-danger">
                @T("ShoppingCart.CartIsEmpty")
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter })
</div>