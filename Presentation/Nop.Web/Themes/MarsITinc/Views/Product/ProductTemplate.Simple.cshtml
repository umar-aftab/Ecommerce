@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@inject Nop.Core.IWebHelper webHelper 
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    <div class="row">
                        <div class="col-12 col-md-5">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                            <!--product pictures-->
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        </div>
                        <div class="col-12 col-md-7">
                            <div class="overview mb-4 position-relative">
                                @await Html.PartialAsync("_Discontinued", Model)
                                <div class="product-name">
                                    <h1 class="fs-3 fw-normal">
                                        @Model.Name
                                    </h1>
                                </div>

                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                                 <!--price-->
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                    @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                }

                                <!--delivery-->
                                @await Html.PartialAsync("_DeliveryInfo", Model)

                                @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)

                                <!--SKU, MAN, GTIN, vendor-->
                                @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)

                                <!--manufacturers-->
                                @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)

                                <!--availability-->
                                @await Html.PartialAsync("_Availability", Model)
                              
                                <!--sample download-->
                                @await Html.PartialAsync("_DownloadSample", Model)

                                <!--product reviews-->
                                @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)

                                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                {
                                    <div class="short-description fs-6 text-secondary mb-3">
                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                }

                                <!--attributes-->
                                @{
                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                    @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                                }

                                <!--gift card-->
                                @{
                                    var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                    dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                                    @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                }
                                <!--rental info-->
                                @{
                                    var dataDictRental = new ViewDataDictionary(ViewData);
                                    dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                                    @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                                }
                                <!--price & add to cart & estimate shipping-->
                                @{
                                    //var dataDictPrice = new ViewDataDictionary(ViewData);
                                    //dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    //@await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                    //@await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                }
                                <!--wishlist, compare, email a friend-->
                                @*<div class="overview-buttons">
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                    @{
                                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                        @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                    }
                                    @await Html.PartialAsync("_CompareProductsButton", Model)
                                    @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                </div>*@
                                @await Html.PartialAsync("_ShareButton", Model)
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                            </div>
                        </div>
                    </div>
                   @* @if (!string.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }*@
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>

                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                    <div class="product-collateral">
                        <div class="product-tabs">
                            <!-- Nav tabs -->
                            <ul class="nav nav-tabs" role="tablist">
                                @if (!string.IsNullOrEmpty(Model.FullDescription))
                                {
                                    <li class="nav-item">
                                        <a class="nav-link active fs-6" data-bs-toggle="tab" data-bs-target="#productdetails" role="tab" aria-selected="true">@T("admin.catalog.attributes.productattributes.fields.description")</a>
                                    </li>
                                }
                                @if (!string.IsNullOrEmpty(@Html.PartialAsync("_ProductTags", Model.ProductTags).ToString()))
                                {
                                    <li class="nav-item">
                                        <a class="nav-link fs-6"  data-bs-toggle="tab" data-bs-target="#producttags" role="tab" aria-selected="false">@T("Products.Tags")</a>
                                    </li>
                                }
                                @if (!string.IsNullOrEmpty(@Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications).ToString()))
                                {
                                    <li class="nav-item">
                                        <a class="nav-link fs-6" data-bs-toggle="tab" data-bs-target="#productspecification" role="tab" aria-selected="false">@T("Products.Specs")</a>
                                    </li>
                                }
                            </ul>

                            <!-- Tab panes -->
                            <div class="tab-content">
                                <div class="tab-pane active" id="productdetails" role="tabpanel">
                                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                                    {
                                        <div class="full-description tab-pane fade show active" id="productdetails" itemprop="description">
                                            @Html.Raw(Model.FullDescription)
                                        </div>
                                    }
                                </div>
                                <div class="fade tab-pane" id="producttags" role="tabpanel">
                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                </div>
                                <div class="fade tab-pane" id="productspecification" role="tabpanel">
                                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                                </div>
                            </div>
                        </div>
                        @*@await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                        @await Html.PartialAsync("_ProductTags", Model.ProductTags)*@
                    </div>
                        @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                        @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
             </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>