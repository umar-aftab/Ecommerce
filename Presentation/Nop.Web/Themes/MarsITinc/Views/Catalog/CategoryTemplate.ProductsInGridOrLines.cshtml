@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
    var subCatCount = 1;
}
@*category breadcrumb*@
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
    <ol class="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
        <li class="breadcrumb-item">
            <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
        </li>
        @{ int position = 1; }
        @foreach (var cat in Model.CategoryBreadcrumb)
        {
            var isLastCategory = cat.Id == Model.Id;
            <li class="breadcrumb-item active" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                @if (isLastCategory)
                {
                    <strong class="current-item" itemprop="name">@cat.Name</strong>
                    <span itemprop="item" itemscope itemtype="http://schema.org/Thing">
                        <link itemprop="url" href="@Url.RouteUrl("Category", new {SeName = cat.SeName})" />
                    </span>
                }
                else
                {
                    <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name" itemprop="name">@cat.Name</a>
                }
                <meta itemprop="position" content="@position" />
            </li>
            position++;
        }
    </ol>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
    }
}
<div class="page category-page">
   @* <div class="page-title">
        <h1>@Model.Name</h1>
    </div>*@
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {
                <div class="row mb-5">
                        @foreach (var item in Model.SubCategories)
                        {
                            if (subCatCount <= 3) {
                                <div class="col-6 col-md-4 mb-4">
                                    <div class="subcat-img">
                                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                            <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" class="img-fluid" />
                                        </a>
                                    </div>
                                    <h2 class="text-center">
                                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title" class="fw-bold fs-6 text-uppercase">
                                            SHOP @item.Name
                                        </a>
                                        <i class="fa fa-caret-right fs-6 ps-1" aria-hidden="true"></i>
                                    </h2>
                                </div>
                            }
                            subCatCount = subCatCount + 1;
                        }
                </div>
        }

        @*@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        featured products
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div class="row">
                    <div class="item-grid">
                        @foreach (var item in Model.FeaturedProducts)
                        {
                            <div class="item-box col-xs-12 col-sm-6 col-md-4 col-lg-4 col-xl-4">
                                <div class="card">
                                    <div class="card-body">
                                        @await Html.PartialAsync("_ProductBox", item)
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })*@
        
        <div class="product-filters position-relative">
            @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled || Model.PagingFilteringContext.SpecificationFilter.Enabled)
            {
                 <div class="fs-6 mb-2">FILTER BY : </div>
            }

            @*filtering*@
            @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
            }
            @*filtering*@
            @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
            }
        </div>

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })

        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })

        @if (Model.Products.Count > 0)
        {
            <div class="row">
                @foreach (var product in Model.Products)
                {
                    <div class="item-box @(Model.PagingFilteringContext.ViewMode == "list" ? "product-list col-12 mb-4" : "product-grid mb-4 col-12 col-sm-6 col-xl-4")">
                            @await Html.PartialAsync("_ProductBox", product)
                    </div>
                }
            </div>
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pagination justify-content-center">
                @pager
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
    </div>
</div>
