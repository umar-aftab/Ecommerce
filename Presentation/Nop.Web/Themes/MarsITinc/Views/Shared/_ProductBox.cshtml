@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}

<div class="product-item" data-productid="@Model.Id">
     <div class="picture position-relative mb-3">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" class="product-img" />
        </a>
        <div class="quick-look-div">
            <a class="quick-look" data-bs-toggle="modal" data-bs-target="#product_view_@Model.Id">Quick Look</a>
        </div>
    </div>
    <div class="details">
        <h2 class="mb-0">
            <a class="d-block fw-normal" href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
        </h2>
       
      @*  @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum*100)/Model.ReviewOverviewModel.TotalReviews)/5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                    </div>
                </div>
            </div>
        }
        <div class="description">
            @Html.Raw(Model.ShortDescription)
        </div>*@
        <div class="add-info">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
            <div class="prices">
                @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                {
                    <span class="price old-price d-block">@Model.ProductPrice.OldPrice</span>
                }
                <span class="price actual-price d-block">@Model.ProductPrice.Price</span>
                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <span class="tax-shipping-info">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </span>
                }
                @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                {
                    <div class="base-price-pangv">
                        @Model.ProductPrice.BasePricePAngV
                    </div>
                }
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            @*<div class="buttons">
                <input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <input type="button" value="@(addToCartText)" class="btn btn-primary product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                }
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
                }
                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                }
            </div>*@
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>

<div class="modal fade" id="product_view_@Model.Id" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl">
        <div class="modal-content">
            <div class="modal-body">
                <div class="row">
                    <div class="col-12 mb-2 mb-sm-0">
                        <a class="btn-close pull-right fs-6" data-bs-dismiss="modal" aria-label="Close"></a>
                    </div>
                    <div class="col-sm-5 col-12 mb-4">
                        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
                            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" class="img-fluid" />
                        </a>
                    </div>
                    <div class="col-sm-7 col-12">
                        <div class="details">
                            <h2>
                                <a class="d-block fs-5" href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
                            </h2>

                            <div class="add-info mb-4">
                               @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                                <div class="mb-3">
                                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                                    {
                                        <span class="price old-price d-block fs-6">@Model.ProductPrice.OldPrice</span>
                                    }
                                    <span class="price actual-price d-block fs-6">@Model.ProductPrice.Price</span>
                                     @if (Model.ProductPrice.DisplayTaxShippingInfo)
                                        {
                                            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                                            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                                            //of course, you can modify appropriate locales to include VAT info there
                                            <span class="tax-shipping-info">
                                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                                            </span>
                                        }
                                        @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                                        {
                                            <div class="base-price-pangv">
                                                @Model.ProductPrice.BasePricePAngV
                                            </div>
                                        }
                                </div>

                                <div class="description mb-3">
                                    @Html.Raw(Model.ShortDescription)
                                </div>

                                <a class="d-block text-danger" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">Read Full Details on Item Page</a>

                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                            </div>
                            <div class="d-grid">
                                @*<button type="button" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')">@T("Products.Details")</button>*@
                                @if (!Model.ProductPrice.DisableBuyButton)
                                {
                                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                                    if (Model.ProductPrice.IsRental)
                                    {
                                        addToCartText = T("ShoppingCart.Rent").Text;
                                    }
                                    if (Model.ProductPrice.AvailableForPreOrder)
                                    {
                                        addToCartText = T("ShoppingCart.PreOrder").Text;
                                    }
                                    <button type="button" class="btn btn-danger col-12 col-md-6 rounded-0 text-uppercase btn-lg" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" >@(addToCartText)</button>
                                }
                               @* @if (!Model.ProductPrice.DisableAddToCompareListButton)
                                {
                                    <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="add-to-compare-list-button ms-2" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
                                }
                                @if (!Model.ProductPrice.DisableWishlistButton)
                                {
                                    <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="add-to-wishlist-button ms-2" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                                }*@
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>